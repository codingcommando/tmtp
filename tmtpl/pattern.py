#!/usr/bin/python
#
# Pattern generation support module
# Copyright:(C) Susan Spencer 2010, 2011
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 2 of the License, or
# (at your option) any later version.
import sys
import math
import json

from pysvg.filter import *
from pysvg.gradient import *
from pysvg.linking import *
from pysvg.script import *
from pysvg.shape import *
from pysvg.structure import *
from pysvg.style import *
from pysvg.text import *
from pysvg.builders import *

from constants import *
from patternbase import pBase

class Generic(object):
    """
    Create a generic base object so that other objects can be attached on the fly with '.'
    """
    def __init__(self):
        return

# ---- Pattern Classes ----------------------------------------

class Point(pBase):
    """
    Creates instance of Python class Point
    Creates & draws XML object from instance of Python class Point
    """
    def __init__(self, group, name, x,  y, nodetype,  transform = '' , draw = True) :

        # TODO remove nodetype if not used
        self.groupname = group
        self.name = name
        self.x         = x
        self.y         = y
        self.transform = transform

        self.size      = 5
        self.style     = { 'stroke' : 'red', 'fill' : 'red', 'stroke-width' : '1' }
        #self.type      = 'node'
        #self.nodetype  = nodetype    #can be corner, smooth, symmetric, tangent, control
        self.coords   = str(x) + "," + str(y)

    def svg(self):
        """
        generate the svg for this item and rturn it as a pysvg object
        """
        if self.debug:
            print 'svg() called for Point ID ', self.id

        pstyle = StyleBuilder(self.style)
        p = circle(self.x, self.y, self.size)
        p.set_style(pstyle.getStyle())
        p.set_id(self.id)
        p.set_transform(self.transform)
        self.groups[self.groupname].addElement(p)
        return

class Pattern(pBase):
    """
    Create an instance of Pattern class, eg - jacket, pants, corset, which will contain the set of pattern piece objects - eg  jacket.back, pants.frontPocket, corset.stayCover
    A pattern does not generate any svg itself, output is only generated by children objects
    """
    def __init__(self, name):
        self.name = name
        self.id = name
        return

class PatternPiece(pBase):
    """
    Create an instance of the PatternPiece class, eg jacket.back, pants.frontPocket, corset.stayCover will contain the set of seams and all other pattern piece info,
    eg - jacket.back.seam.shoulder, jacket.back.grainline,  jacket.back.interfacing
    """
    def __init__(self, name, letter = '?', fabric = 0, interfacing = 0, lining = 0):
        self.name = name
        self.width = 0
        self.height = 0
        self.fabric = fabric
        self.interfacing = interfacing
        self.lining = lining
        self.transform = ""
