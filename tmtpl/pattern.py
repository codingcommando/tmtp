#!/usr/bin/python
#
# Pattern generation support module
# Copyright:(C) Susan Spencer 2010, 2011
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 2 of the License, or
# (at your option) any later version.
import sys
import math
import json

from pysvg.filter import *
from pysvg.gradient import *
from pysvg.linking import *
from pysvg.script import *
from pysvg.shape import *
from pysvg.structure import *
from pysvg.style import *
from pysvg.text import *
from pysvg.builders import *

from constants import *
from patternbase import pBase

# ---- Pattern Classes ----------------------------------------

class Pattern(pBase):
    """
    Create an instance of Pattern class, eg - jacket, pants, corset, which will contain the set of pattern piece objects - eg  jacket.back, pants.frontPocket, corset.stayCover
    A pattern does not generate any svg itself, output is only generated by children objects
    """
    def __init__(self, name):
        self.name = name
        pBase.__init__(self)

class PatternPiece(pBase):
    """
    Create an instance of the PatternPiece class, eg jacket.back, pants.frontPocket, corset.stayCover will contain the set of seams and all other pattern piece info,
    eg - jacket.back.seam.shoulder, jacket.back.grainline,  jacket.back.interfacing
    """
    def __init__(self, group, name, letter = '?', fabric = 0, interfacing = 0, lining = 0):
        self.name = name
        self.groupname = group
        self.width = 0
        self.height = 0
        self.fabric = fabric
        self.interfacing = interfacing
        self.lining = lining
        self.attrs = {}
        self.attrs['transform'] = ''
        pBase.__init__(self)

    def svg(self):
        """
        generate the svg for this item and rturn it as a pysvg object
        """
        if self.debug:
            print 'svg() called for PatternPiece ID ', self.id

        # get all the svg items in all children, in groups
        # See the base class definition of the svg() method for more
        svgdict = pBase.svg(self)

        # We pass back everything but our layer untouched
        # For our layer, we bundle up all the children's SVG
        # and place it within a group that has our id

        childlist = pBase.svg(self)

        my_group = g()
        my_group.set_id(self.id)
        for attrname, attrvalue in self.attrs.items():
            my_group.setAttribute(attrname, attrvalue)
        for cgitem in childlist[self.groupname]:
            my_group.addElement(cgitem)

        # now we replace the list of items in our group that we got
        # from the children with our one svg item, which is a group
        # that contains them all
        my_group_list = []
        my_group_list.append(my_group)
        childlist[self.groupname] = my_group_list

        return childlist

class Node(pBase):
    """
    Create an instance which is only intended to be a holder for other objects
    """
    def __init__(self, name):
        self.name = name
        pBase.__init__(self)

class Point(pBase):
    """
    Creates instance of Python class Point
    Creates & draws XML object from instance of Python class Point
    """
    def __init__(self, group, name, x,  y, transform = '') :

        self.groupname = group
        self.name = name
        self.x         = x
        self.y         = y
        self.attrs = {}
        self.attrs['transform'] = transform

        self.size      = 5
        # TODO probably put the style somwhere else
        self.style     = { 'stroke' : 'red', 'fill' : 'red', 'stroke-width' : '1' }
        self.coords   = str(x) + "," + str(y)
        pBase.__init__(self)

    def add(self, obj):
        # Points don't have children. If this changes, change the svg method also.
        raise RuntimeError('The Point class can not have children')

    def svg(self):
        """
        generate the svg for this item and rturn it as a pysvg object
        """
        if self.debug:
            print 'svg() called for Point ID ', self.id

        # an empty dict to hold our svg elements
        md = self.mkgroupdict()

        pstyle = StyleBuilder(self.style)
        p = circle(self.x, self.y, self.size)
        p.set_style(pstyle.getStyle())
        p.set_id(self.id)
        for attrname, attrvalue in self.attrs.items():
            p.setAttribute(attrname, attrvalue)
        md[self.groupname].append(p)

        return md

class Line(pBase):
    """
    Creates instance of Python class Point
    Creates & draws XML object from instance of Python class Point
    """
    def __init__(self, group, name, label, xstart,  ystart, xend, yend, transform = '') :

        self.groupname = group
        self.name = name
        self.label = label
        self.xstart = xstart
        self.ystart = ystart
        self.xend = xend
        self.yend = yend
        self.attrs = {}
        self.attrs['transform'] = transform
        # TODO probably put the style somwhere else
        self.style     = { 'stroke' : 'orange', 'stroke-width' : '2' }

        pBase.__init__(self)

    def add(self, obj):
        # Lines don't have children. If this changes, change the svg method also.
        raise RuntimeError('The Line class can not have children')

    def svg(self):
        """
        generate the svg for this item and rturn it as a pysvg object
        """
        if self.debug:
            print 'svg() called for Line ID ', self.id

        # an empty dict to hold our svg elements
        md = self.mkgroupdict()

        pstyle = StyleBuilder(self.style)
        p = line(self.xstart, self.ystart, self.xend, self.yend)
        p.set_style(pstyle.getStyle())
        p.set_id(self.id)
        for attrname, attrvalue in self.attrs.items():
            p.setAttribute(attrname, attrvalue)
        md[self.groupname].append(p)

        return md

