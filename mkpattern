#!/usr/bin/env python
#

# for the framework
from sys             import argv
from getopt          import getopt, GetoptError

# for the pattern generation
from tmtpl.utils     import stdo
from tmtpl.std_app   import StdApp

from tmtpl.constants import *
from tmtpl.pattern   import *
from tmtpl.document   import *
from tmtpl.support   import *
from tmtpl.client   import Client

# Project specific
#from math import sin, cos, radians

from pysvg.filter import *
from pysvg.gradient import *
from pysvg.linking import *
from pysvg.script import *
from pysvg.shape import *
from pysvg.structure import *
from pysvg.style import *
from pysvg.text import *
from pysvg.builders import *

# Needed in order to import the design
from os import path
import imp

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': print e
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] --pattern=<pattern file> --styles=<styles file> --client=<client file> [--debug=[dump]] outfile \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --pattern=<pattern file>                                                             \n")
        stdo("                         The full path to the pattern file to use.                           \n")
        stdo("                                                                                             \n")
        stdo("        --styles=<styles file>                                                              \n")
        stdo("                         The full path to the styles file to use.                            \n")
        stdo("                                                                                             \n")
        stdo("        --client=<client file>                                                               \n")
        stdo("                         The full path to the client data file to use.                       \n")
        stdo("                                                                                             \n")
        stdo("        --debug=[dump]                                                                       \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose out.svg                                                                 \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'pattern=', 'styles=', 'client=', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            if len(args) != 1:
                raise CmdlineError('You must supply an output file name\n\n')
                
            self.cfg['args'] = args

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--pattern'):
                    self.cfg['pattern_file'] = val

                elif opt in ('--styles'):
                    self.cfg['styles_file'] = val

                elif opt in ('--client'):
                    self.cfg['client_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        # can add code here as needed
        return


# AppTemplate
#
class AppTemplate(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)
            return

        if self.cfg.has_key('verbose'):
            verbose = True
        else:
            verbose = False


        if self.cfg.has_key('client_file'):
            mfn = self.cfg['client_file']
            if verbose:
                print "Using client file: ", mfn
        else:
            cmdline.error('Error: You must specify a client file\n\n', self.defaults)
            return

        if self.cfg.has_key('pattern_file'):
            mfn = self.cfg['pattern_file']
            if verbose:
                print "Using pattern file: ", mfn
        else:
            cmdline.error('Error: You must specify a pattern file\n\n', self.defaults)
            return

        if self.cfg.has_key('styles_file'):
            mfn = self.cfg['styles_file']
            if verbose:
                print "Using styles file: ", mfn
        else:
            cmdline.error('Error: You must specify a styles file\n\n', self.defaults)
            return

        dbgdump = False
        if self.cfg.has_key('debug'):
            debug = self.cfg['debug']
            if "dump" in debug:
                dbgdump = True
                print "Debug: dump enabled"
        else:
            dbgdump = False

        # open the client file and read the data
        client = Client(self.cfg['client_file'])
        cd = client.data

        if dbgdump:
            print "========== Client Data Dump =========="
            print client.dump(),
            print "======== End Client Data Dump ========"

        try:
            mod_name,file_ext = path.splitext(path.split(self.cfg['pattern_file'])[-1])
            designModule = imp.load_source(mod_name, self.cfg['pattern_file'])
        except:
            print 'unable to load Pattern File <%s>' % self.cfg['pattern_file']
            return

        design = designModule.PatternDesign()

        # set Client Data for the design object
        design.cd = cd
        # design.styledefs = something
        design.cfg = self.cfg

        # set styles for the design object
        design.styledefs['point_style'] = { 
            'stroke' : 'red',
            'fill' : 'red',
            'stroke-width' : '1'
            }
        design.styledefs['reference_path_style'] = {
            'fill'               : 'none',
            'stroke'             : 'gray',
            'stroke-width'       : '4',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4',
                'stroke-dasharray'   : '6,18',
            'stroke-dashoffset'  : '0'
            }
        design.styledefs['default'] = {
            'fill'               : 'none',
            'stroke'             : 'red',
            'stroke-width'       : '4',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4',
            }
        design.styledefs['line_path_style'] = {
            'fill'               : 'none',
            'stroke'             : 'pink',
            'stroke-width'       : '5',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['dart_style'] = {
            'fill'               : 'none',
            'stroke'             : 'gray',
            'stroke-width'       : '5',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['foldline_style'] = {
            'fill'               : 'none',
            'stroke'             : 'gray',
            'stroke-width'       : '2',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['hemline_path_style'] = {
            'fill'               : 'none',
            'stroke'             : 'gray',
            'stroke-width'       : '2',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['seamline_path_style'] = {
            'fill'               : 'none',
            'stroke'             : 'green',
            'stroke-width'       : '4',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4',
            'stroke-dasharray'   : '24,6',
            'stroke-dashoffset'  : '0'
            }
        design.styledefs['cuttingline_style'] = {
            'fill'               : 'none',
            'stroke'             : 'green',
            'stroke-width'       : '6',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['placement_style'] = {
            'fill'               : 'none',
            'stroke'             : 'gray',
            'stroke-width'       : '4',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4',
            'stroke-dasharray'   : '6,18',
            'stroke-dashoffset'  : '0'
            }
        design.styledefs['grainline_style'] = {
            'fill'               : 'none',
            'stroke'             : 'green',
            'stroke-width'       : '4',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['buttonhole_style'] = {
            'fill'               : 'none',
            'stroke'             : 'gray',
            'stroke-width'       : '4',
            'stroke-linejoin'    : 'miter',
            'stroke-miterlimit'  : '4'
            }
        design.styledefs['tooltip_text_style'] = {
            'vertical-align':'top',
            'fill-opacity':'1.0',
            'font-size':'50',
            'font-style':'normal',
            'fill':'blue',
            'font-weight':'normal',
            'stroke':'black',
            'text-anchor':'right',
            'text-align':'right'
            }
        design.styledefs['titleblock_text_style'] = {
            'vertical-align':'top',
            'fill-opacity':'1.0',
            'font-size':'40',
            'font-style':'normal',
            'fill':'#000000',
            'font-weight':'normal',
            'stroke':'none',
            'text-anchor':'right',
            'text-align':'right'
            }
        design.styledefs['default_textblock_text_style'] = {
            'vertical-align':'top',
            'fill-opacity':'1.0',
            'font-size':'12',
            'font-style':'normal',
            'fill':'#000000',
            'font-weight':'normal',
            'stroke':'none',
            'text-anchor':'start',
            'text-align':'right'
            }
        design.styledefs['textblock_box_style'] = {
            'fill'               : 'none',
            'stroke'             : 'blue',
            'stroke-width'       : '6',
            'rx'                 : '5',
            'ry'                 : '5'
            }
        design.styledefs['point_text_style'] = {
            'vertical-align':'top',
            'fill-opacity':'1.0',
            'font-size':'15',
            'font-style':'normal',
            'fill':'#000000',
            'font-weight':'normal',
            'stroke':'none',
            'text-anchor':'right',
            'text-align':'right'
            }

        # TEMP Save it
        sf = open('tmtp_styles.json', 'w+')
        sf.write(json.dumps(design.styledefs, sort_keys=True, indent=4))
        sf.close()

        # Call the design to generate the pattern
        design.pattern()

        return


if __name__ == '__main__':
    app = AppTemplate()
    app.main()

# vi:set ts=4 sw=4 expandtab:

