#!/usr/bin/env python
#
# This file is part of the tmtp (Tau Meta Tau Physica) project.
# For more information, see http://www.sew-brilliant.org/
#
# Copyright (C) 2010, 2011 Susan Spencer and Steve Conklin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# This is a standalone pattern generator which is part of the tmtp
# project. It encapsulates the framework needed to generate an svg
# output file containing a sewing pattern from information provided
# in a separate design file. Client data (measurements) and graphics
# styles are contained in configuration files and referenced on the
# command line.
#

# for the framework
from sys             import argv
from getopt          import getopt, GetoptError

# for the pattern generation
from tmtpl.utils     import stdo
from tmtpl.std_app   import StdApp
from tmtpl.markers   import markers

from tmtpl.constants import *
from tmtpl.pattern   import *
from tmtpl.document   import *
from tmtpl.client   import Client

# Project specific
#from math import sin, cos, radians

from pysvg.filter import *
from pysvg.gradient import *
from pysvg.linking import *
from pysvg.script import *
from pysvg.shape import *
from pysvg.structure import *
from pysvg.style import *
from pysvg.text import *
from pysvg.builders import *

# Needed in order to import the design
from os import path
import imp

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': print e
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] --pattern=<pattern file> --styles=<styles file> --client=<client file> [--debug=[dump]] outfile \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --tooltips       Add tooltips to the reference layer points which display the point  \n")
        stdo("                         name when you hover of it                                           \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --pattern=<pattern file>                                                             \n")
        stdo("                         The full path to the pattern file to use.                           \n")
        stdo("                                                                                             \n")
        stdo("        --styles=<styles file>                                                              \n")
        stdo("                         The full path to the styles file to use.                            \n")
        stdo("                                                                                             \n")
        stdo("        --printgroups=<groupname1,groupname2, . . .>                                         \n")
        stdo("                         The groups you want in the output (defaults to all).                \n")
        stdo("                                                                                             \n")
        stdo("        --client=<client file>                                                               \n")
        stdo("                         The full path to the client data file to use.                       \n")
        stdo("                                                                                             \n")
        stdo("        --debug=[dump]                                                                       \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose out.svg                                                                 \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'tooltips', 'config=', 'pattern=', 'cfgoptions=', 'printgroups=', 'styles=', 'client=', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            if len(args) != 1:
                raise CmdlineError('You must supply an output file name\n\n')
                
            self.cfg['args'] = args

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif (opt == '--tooltips'):
                    self.cfg['tooltips'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--pattern'):
                    self.cfg['pattern_file'] = val

                elif opt in ('--printgroups'):
                    self.cfg['print_groups'] = val

                elif opt in ('--styles'):
                    self.cfg['styles_file'] = val

                # this is more for debugging than anything else
                elif opt in ('--cfgoptions'):
                    self.cfg['config_options'] = val

                elif opt in ('--client'):
                    self.cfg['client_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        # can add code here as needed
        return


# AppTemplate
#
class AppTemplate(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)
            return

        if self.cfg.has_key('verbose'):
            verbose = True
        else:
            verbose = False


        if self.cfg.has_key('client_file'):
            mfn = self.cfg['client_file']
            if verbose:
                print "Using client file: ", mfn
        else:
            cmdline.error('Error: You must specify a client file\n\n', self.defaults)
            return

        if self.cfg.has_key('pattern_file'):
            mfn = self.cfg['pattern_file']
            if verbose:
                print "Using pattern file: ", mfn
        else:
            cmdline.error('Error: You must specify a pattern file\n\n', self.defaults)
            return

        if self.cfg.has_key('styles_file'):
            mfn = self.cfg['styles_file']
            if verbose:
                print "Using styles file: ", mfn
        else:
            cmdline.error('Error: You must specify a styles file\n\n', self.defaults)
            return

        if self.cfg.has_key('print_groups'):
            pgrps = self.cfg['print_groups']
            if pgrps == '':
                print "No groups specified for --printgroups="
            if verbose:
                print "Printing groups: <%s>" % pgrps

        # A somewhat dangerous debugging tool, allows one to push attributes
        # into the self.cfg dictionary
        if self.cfg.has_key('config_options'):
            pgrps = self.cfg['config_options']
            if pgrps != '':
                doptions = self.cfg['config_options'].split(',')
                for dopt in doptions:
                    self.cfg[dopt] = True

        dbgdump = False
        if self.cfg.has_key('debug'):
            debug = self.cfg['debug']
            if "dump" in debug:
                dbgdump = True
                print "Debug: dump enabled"
        else:
            dbgdump = False

        # open the client file and read the data
        client = Client(self.cfg['client_file'])
        cd = client.data

        if dbgdump:
            print "========== Client Data Dump =========="
            print client.dump(),
            print "======== End Client Data Dump ========"

        # open the styles file and read data
        try:
            f = open(self.cfg['styles_file'], 'r')
            self.styledefs = json.load(f)
            f.close()
        except:
            print 'unable to load Styles File <%s>' % self.cfg['styles_file']
            return

        # Load the markers from the python module where they are defined in a dictionary
        self.markerdefs = markers.markerlist

        # TODO load any user-defined markers

        # Now we load the actual design, which is in the form of a python module
        try:
            mod_name,file_ext = path.splitext(path.split(self.cfg['pattern_file'])[-1])
            designModule = imp.load_source(mod_name, self.cfg['pattern_file'])
        except:
            print 'unable to load Pattern File <%s>' % self.cfg['pattern_file']
            raise

        design = designModule.PatternDesign()

        # set Client Data for the design object
        design.cd = cd
        design.styledefs = self.styledefs
        design.markerdefs = self.markerdefs
        design.cfg = self.cfg

        # Call the design to generate the pattern
        design.pattern()

        return


if __name__ == '__main__':
    app = AppTemplate()
    app.main()

# vi:set ts=4 sw=4 expandtab:

